<?php
 // $Id$

 /**
  * @file
  *   A 'basic' implementation of the 'example' service type.
  */

/**
 * A class containing the 'basic' implementation of the 'example' service.
 *
 * This class is conditionally loaded when the "--example_service_type=basic"
 * option is passed to provision-save commands run on servers.
 *
 * The above flag is generated by the hosting counterpart of this class, which
 * provides the front end to configure all these fields.
 *
 * The responsibilities of this class include responding and saving any
 * values that are passed to it, and also to override the portions of
 * the public API for this service that are necessary.
 */
class Provision_Service_cdn_basic extends Provision_Service_cdn {
 /**
  * Some common options handled upstream by the base service classes.
  */

  /**
   * Register the db handler for sites, based on the db_server option.
   */
  static function subscribe_site($context) {
    $context->setProperty('cdn');
  }

  /**
   * Initialize this class, including option handling.
   */
  function init() {
    parent::init();

    /**
     * Register configuration classes for the create_config / delete_config methods.
     */
    $this->configs['site'][] = 'Provision_Config_CDN';

    /**
     * Non configurable values.
     */
    $this->server->cdn_config_path = $this->server->http_vhostd_path;
  }

  function init_site() {
    parent::init_site();

    $this->context->setProperty('cdn', array(), TRUE);
  }

  /**
   * Pass additional values to the config file templates.
   */
  function config_data($config = null, $class = null) {
    $data = parent::config_data($config, $class);
    if (!is_null($this->application_name)) {
      $data['http_pred_path'] = $this->server->http_pred_path;
      $data['http_postd_path'] = $this->server->http_postd_path;
      $data['http_platformd_path'] = $this->server->http_platformd_path;
      $data['http_vhostd_path'] = $this->server->http_vhostd_path;
    }

    $data['http_port'] = $this->server->http_port;

    // We assign this generic catch all for standard http.
    // The SSL based services will override this with the
    // correct ip address.
    if (sizeof($this->server->ip_addresses)) {
      // Use the first IP address for all standard virtual hosts.
      $data['ip_address'] = $this->server->ip_addresses[0];
    }
    else {
      // If no external ip addresses are defined, we fall back on *:port
      // There will be no SSL , so that's fine.
      $data['ip_address'] = '*';
    }

    return $data;
  }

  /**
   * Implementation of service verify.
   */
  function verify() {
    drush_log('Provision_Service_cdn_basic::verify', 'ok');
    parent::verify();
    if ($this->context->type == 'site') {
      // Create the configuration file directory.
      provision_file()->create_dir($this->server->cdn_config_path, dt("Example configuration"), 0700);
      // Sync the directory to the remote server if needed.
      $this->sync($this->server->cdn_config_path);
    }
  }
}
